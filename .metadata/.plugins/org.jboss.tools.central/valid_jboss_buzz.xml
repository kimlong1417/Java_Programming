<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title type="html">How to manage Transactions in Quarkus</title><link rel="alternate" href="http://www.mastertheboss.com/soa-cloud/quarkus/how-to-manage-transactions-in-quarkus/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/soa-cloud/quarkus/how-to-manage-transactions-in-quarkus/</id><updated>2022-04-19T10:40:44Z</updated><content type="html">This article launches you on a tour of Transaction Management in Quarkus applications by focusing on the standard declarative approach and the new programmatic transaction API. Quarkus Transactions extension Quarkus, just like other Enterprise applications, uses a Transaction Manager to coordinate and expose transactions to your applications. At its core, Quarkus uses Narayana Transaction Manager, ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title>Java 17: What’s new in OpenJDK's container awareness</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/04/19/java-17-whats-new-openjdks-container-awareness" /><author><name>Severin Gehwolf</name></author><id>d5069613-6b53-421b-9e45-bf8cf43625de</id><updated>2022-04-19T07:00:00Z</updated><published>2022-04-19T07:00:00Z</published><summary type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;OpenJDK&lt;/a&gt; has been aware of &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux&lt;/a&gt; containers (such as &lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt; and &lt;a href="https://podman.io"&gt;Podman&lt;/a&gt;, as well as container orchestration frameworks such as &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;) for some time. By &lt;em&gt;container awareness,&lt;/em&gt; we mean that OpenJDK detects when it is running inside a container. In this article, you'll learn why container awareness is useful, what has changed recently in that area of OpenJDK, and what diagnostic options are available to help developers gain insight into how the JVM determines settings.&lt;/p&gt; &lt;p&gt;OpenJDK's container awareness detection uses Linux's control group (cgroup) filesystem to detect enforced resource quotas. As of this writing, Java 17 is the only long-term support release that supports both &lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/cgroups.html"&gt;cgroups v1&lt;/a&gt; and &lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v2.html"&gt;cgroups v2&lt;/a&gt; configurations. Note, however, that there is currently work ongoing to backport cgroups v2 support to OpenJDK 11.&lt;/p&gt; &lt;p&gt;OpenJDK detects whether certain resource quotas are in place when running in a container and, if so, uses those bounds for its operation. These resource limits affect, for example, the garbage collection (GC) algorithm selected by the JVM, the default size of the heap, the sizes of thread pools, and how default parallelism is determined for &lt;code&gt;ForkJoinPool&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;OpenJDK container awareness has been available in Java 17 and Java 11 since their respective general availability (GA) releases, and in Java 8u starting with update 8u202.&lt;/p&gt; &lt;h2&gt;Why container awareness is important&lt;/h2&gt; &lt;p&gt;Kubernetes and many other popular cloud orchestration systems let deployments limit container resources via &lt;a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#how-pods-with-resource-requests-are-scheduled"&gt;CPU and memory quotas&lt;/a&gt;. Those limits translate into options that are passed to the container engine when containers are deployed. Container engine options, in turn, set resource limits via the Linux cgroup pseudo-filesystem. The Linux kernel ensures that when resource limits are in place via the cgroup, no process goes beyond those limits (at least not for extended periods of time).&lt;/p&gt; &lt;p&gt;When Java processes are deployed in such an environment, cgroup limits might be set for the deployed process. If the Java Virtual Machine does not take configured cgroup limits into account, it might risk trying to consume more resources than the operating system is willing to provide to it. The result could be the unexpected termination of the Java process.&lt;/p&gt; &lt;h2&gt;Recent changes in OpenJDK's container awareness code&lt;/h2&gt; &lt;p&gt;Between Java 11 and Java 17, the most prominent two additions are cgroups v2 support and container awareness in the &lt;code&gt;OperatingSystemMXBean&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;cgroups v2 support&lt;/h3&gt; &lt;p&gt;Since Java 15, OpenJDK detects the cgroup version in use and detects limits according to cgroup version-specific settings. For Java 15 and onwards, OpenJDK supports cgroups v1 as well as cgroups v2 or the unified hierarchy (see &lt;a href="https://bugs.openjdk.java.net/browse/JDK-8230305"&gt;JDK-8230305&lt;/a&gt; for more on this).&lt;/p&gt; &lt;p&gt;If you run Java 11 or Java 8 on a system that has only cgroups v2 , no container detection will be in place and the host values will be used instead. As explained earlier, this might yield unexpected application behavior in containerized deployments.&lt;/p&gt; &lt;p&gt;One quick way to show which cgroup version is in use on a system is the &lt;code&gt;-XshowSettings:system&lt;/code&gt; option of the &lt;code&gt;java&lt;/code&gt; launcher. (This option is Linux-specific.) Here's an example:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ java -XshowSettings:system -version Operating System Metrics: Provider: cgroupv2 Effective CPU Count: 2 CPU Period: 100000us CPU Quota: 200000us CPU Shares: 1024us List of Processors: N/A List of Effective Processors, 4 total: 0 1 2 3 List of Memory Nodes: N/A List of Available Memory Nodes, 1 total: 0 Memory Limit: 1.00G Memory Soft Limit: 800.00M Memory &amp; Swap Limit: 1.00G openjdk version "17.0.2" 2022-01-18 OpenJDK Runtime Environment 21.9 (build 17.0.2+8) OpenJDK 64-Bit Server VM 21.9 (build 17.0.2+8, mixed mode, sharing)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Other ways to figure out the cgroup configuration in use include the &lt;code&gt;VM.info&lt;/code&gt; &lt;code&gt;jcmd&lt;/code&gt; utility (in the section "container (cgroup) information") or the &lt;code&gt;-Xlog:os+container=debug&lt;/code&gt; JVM option.&lt;/p&gt; &lt;p&gt;If no cgroup v2 support is present—if you were working with Java 11, for example—the &lt;code&gt;-XshowSettings:system&lt;/code&gt; output would look like this:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ java -XshowSettings:system -version Operating System Metrics: No metrics available for this platform openjdk version "11.0.14" 2022-01-18 OpenJDK Runtime Environment 18.9 (build 11.0.14+9) OpenJDK 64-Bit Server VM 18.9 (build 11.0.14+9, mixed mode, sharing)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If no system metrics are detected, the JVM process falls back to using host operating system settings.&lt;/p&gt; &lt;h3&gt;OperatingSystemMXBean container awareness&lt;/h3&gt; &lt;p&gt;Since Java 14, the &lt;code&gt;OperatingSystemMXBean&lt;/code&gt; uses the JDK's internal, Linux-specific Metrics Java API to report system information. That means if cgroup limits are in place, the &lt;code&gt;OperatingSystemMXBean&lt;/code&gt; reports those limits (as appropriate) over the container host system resources. This feature has also been backported to Java 8 (8u272 and newer) and Java 11 (11.0.9 and newer).&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: Container awareness in OpenJDK can be disabled with the in the &lt;code&gt;-XX:-UseContainerSupport&lt;/code&gt; JVM option. This, in turn, would disable container awareness of &lt;code&gt;OperatingSystemMXBean&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The following file, named &lt;code&gt;CheckOperatingSystemMXBean.java&lt;/code&gt;, displays information about the system on which it is running. As it is using the container-aware &lt;code&gt;OperatingSystemMXBean&lt;/code&gt;, it will show information about either the physical host or the container resources, depending on the environment in which it is running:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-java"&gt;import com.sun.management.OperatingSystemMXBean; import java.lang.management.ManagementFactory; public class CheckOperatingSystemMXBean { public static void main(String[] args) { System.out.println("Checking OperatingSystemMXBean"); OperatingSystemMXBean osBean = (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean(); System.out.println(String.format("Runtime.availableProcessors: %d", Runtime.getRuntime().availableProcessors())); System.out.println(String.format("OperatingSystemMXBean.getAvailableProcessors: %d", osBean.getAvailableProcessors())); System.out.println(String.format("OperatingSystemMXBean.getTotalPhysicalMemorySize: %d", osBean.getTotalPhysicalMemorySize())); System.out.println(String.format("OperatingSystemMXBean.getFreePhysicalMemorySize: %d", osBean.getFreePhysicalMemorySize())); System.out.println(String.format("OperatingSystemMXBean.getTotalSwapSpaceSize: %d", osBean.getTotalSwapSpaceSize())); System.out.println(String.format("OperatingSystemMXBean.getFreeSwapSpaceSize: %d", osBean.getFreeSwapSpaceSize())); System.out.println(String.format("OperatingSystemMXBean.getSystemCpuLoad: %f", osBean.getSystemCpuLoad())); } }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Compiling and running the program displays the resources available to it:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ./jdk-17.0.1+12/bin/javac CheckOperatingSystemMXBean.java $ sudo podman run -ti --rm --memory 300m --memory-swap 300m --cpu-period 100000 --cpu-quota 200000 -v $(pwd):/opt:z fedora:35 [root@7a0de39d8430 opt]# /opt/jdk-17.0.1+12/bin/java CheckOperatingSystemMXBean Checking OperatingSystemMXBean Runtime.availableProcessors: 2 OperatingSystemMXBean.getAvailableProcessors: 2 OperatingSystemMXBean.getTotalPhysicalMemorySize: 314572800 OperatingSystemMXBean.getFreePhysicalMemorySize: 291680256 OperatingSystemMXBean.getTotalSwapSpaceSize: 0 OperatingSystemMXBean.getFreeSwapSpaceSize: 0 OperatingSystemMXBean.getSystemCpuLoad: 0.050386 [root@7a0de39d8430 opt]# /opt/jdk-17.0.1+12/bin/java -XX:-UseContainerSupport CheckOperatingSystemMXBean Checking OperatingSystemMXBean Runtime.availableProcessors: 4 OperatingSystemMXBean.getAvailableProcessors: 4 OperatingSystemMXBean.getTotalPhysicalMemorySize: 5028548608 OperatingSystemMXBean.getFreePhysicalMemorySize: 3474866176 OperatingSystemMXBean.getTotalSwapSpaceSize: 5027917824 OperatingSystemMXBean.getFreeSwapSpaceSize: 5027917824 OperatingSystemMXBean.getSystemCpuLoad: 0.000000 &lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Tuning defaults for containers&lt;/h2&gt; &lt;p&gt;In some cases, the OpenJDK default settings for memory and CPU usage might not be the desired settings for applications running in containers. OpenJDK needs to consider multi-user desktop and server systems as well as container use cases, among other things. A container is different from a desktop or server because quite often the Java process is the only one running in that container. For example, in a Kubernetes container with a memory limit of 800MB RAM, a default &lt;code&gt;-XX:MaxRAMPercentage=25&lt;/code&gt;, probably doesn't make as much sense as it would on a multi-user desktop system, because the maximum heap size would be bound above by 200MB RAM (one-quarter of 800MB) of that 800MB container.&lt;/p&gt; &lt;p&gt;To tune OpenJDK for the typical container use case, options have been introduced with &lt;a href="https://bugs.openjdk.java.net/browse/JDK-8186248"&gt;JDK-8186248&lt;/a&gt; (and in OpenJDK 8u with &lt;a href="https://bugs.openjdk.java.net/browse/JDK-8146115"&gt;JDK-8146115&lt;/a&gt;) that specifically allow you to set heap sizes in percentages of available (container) memory to better fit this specific use case. These options are &lt;code&gt;-XX:InitialRAMPercentage&lt;/code&gt;, &lt;code&gt;-XX:MaxRAMPercentage&lt;/code&gt;, and &lt;code&gt;-XX:MinRAMPercentage&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Setting these percentage options when the application runs in a container is preferable to setting maximum and minimum heap size for your application via &lt;code&gt;-Xmx&lt;/code&gt; and &lt;code&gt;-Xms&lt;/code&gt;, respectively. The &lt;code&gt;-XX&lt;/code&gt; options set the heap size &lt;em&gt;relative&lt;/em&gt; to the container memory limits and get updated automatically on redeployment should those limits change in the deployment configuration. When both types of settings are in place, &lt;code&gt;-Xmx&lt;/code&gt; and &lt;code&gt;-Xms&lt;/code&gt; take precedence.&lt;/p&gt; &lt;p&gt;Another important option for overriding CPU settings when running inside containers is &lt;code&gt;-XX:ActiveProcessorCount&lt;/code&gt;. This option lets you specify exactly how many CPU cores the JVM should use regardless of container detection heuristics.&lt;/p&gt; &lt;p&gt;Container detection support can also be disabled entirely using the &lt;code&gt;-XX:-UseContainerSupport&lt;/code&gt; option.&lt;/p&gt; &lt;p&gt;Table 1 summarizes some useful options for tuning JVM settings when running in a container.&lt;/p&gt; &lt;div&gt; &lt;table cellspacing="0" width="646"&gt;&lt;caption&gt;Table 1: Tuning options.&lt;/caption&gt; &lt;tbody&gt;&lt;tr&gt;&lt;td&gt; &lt;p&gt;&lt;strong&gt;JVM option&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;&lt;strong&gt;Replaces JVM option&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;&lt;strong&gt;Default value&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;p&gt;&lt;code&gt;-XX:InitialRAMPercentage&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;&lt;code&gt;-XX:InitialRAMFraction&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;Percentage of real memory used for initial heap size&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;1.5625&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;p&gt;&lt;code&gt;-XX:MaxRAMPercentage&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;&lt;code&gt;-XX:MaxRAMFraction&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;Maximum percentage of real memory used for maximum heap size&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;25&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;p&gt;&lt;code&gt;-XX:MinRAMPercentage&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;&lt;code&gt;-XX:MinRAMFraction&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;Minimum percentage of real memory used for maximum heap size on systems with small physical memory&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;50&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;p&gt;&lt;code&gt;-XX:ActiveProcessorCount&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;n/a&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;CPU count that the VM should use and report as active&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;n/a&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;p&gt;&lt;code&gt;-XX:±UseContainerSupport&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;n/a&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;Enable detection and runtime container configuration support&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p&gt;true&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; &lt;h2&gt;Opinionated configuration&lt;/h2&gt; &lt;p&gt;Default container detection heuristics for CPU resource limits are largely modeled on the way popular container orchestration frameworks—specifically Kubernetes and Mesos—spawn containers. For example, in a Kubernetes setup, there are four (main) cases to consider when CPU resource limits are in place. There are actually even more possibilities because cluster defaults might be in place, but those are largely also covered by these cases:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Both &lt;code&gt;spec.containers[].resources.limits.cpu&lt;/code&gt; and &lt;code&gt;spec.containers[].resources.requests.cpu&lt;/code&gt; are explicitly set.&lt;/li&gt; &lt;li&gt;Only &lt;code&gt;spec.containers[].resources.limits.cpu&lt;/code&gt; is explicitly set. Kubernetes sets &lt;code&gt;spec.containers[].resources.requests.cpu&lt;/code&gt; to the same value as &lt;code&gt;spec.containers[].resources.limits.cpu&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Only &lt;code&gt;spec.containers[].resources.requests.cpu&lt;/code&gt; is explicitly set. Kubernetes sets &lt;code&gt;spec.containers[].resources.limits.cpu&lt;/code&gt; to a value not smaller than &lt;code&gt;spec.containers[].resources.requests.cpu&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Neither &lt;code&gt;spec.containers[].resources.limits.cpu&lt;/code&gt; nor &lt;code&gt;spec.containers[].resources.requests.cpu&lt;/code&gt; is set. Kubernetes keeps &lt;code&gt;spec.containers[].resources.limits.cpu&lt;/code&gt; unset and sets &lt;code&gt;spec.containers[].resources.requests.cpu&lt;/code&gt; to 2 if no other defaults are in place.&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;Container orchestration frameworks usually multiply the millicore value of &lt;code&gt;spec.containers[].resources.requests.cpu&lt;/code&gt; by 1024, which then directly translates to the value set in Docker or Podman by the &lt;code&gt;--cpu-shares&lt;/code&gt; command-line option. Therefore, the JVM will calculate the CPU shares value based on this knowledge.&lt;/p&gt; &lt;p&gt;In addition, the JVM will set a lower bound on a CPU core value of 1. That is, a container with a setting of &lt;code&gt;spec.containers[].resources.requests.cpu=500m&lt;/code&gt; makes the JVM use a single CPU core (&lt;code&gt;0.5 * 1024 = 512&lt;/code&gt;, generating an option of &lt;code&gt;--cpu-shares=512&lt;/code&gt;; &lt;code&gt;cpu-shares &lt; 1024&lt;/code&gt; results in one core). A setting of &lt;code&gt;spec.containers[].resources.requests.cpu=2&lt;/code&gt; makes the JVM use two CPU cores, and so on.&lt;/p&gt; &lt;p&gt;Note that these rules cause the JVM to think it can use only one CPU core for the final case in the list, where neither option is explicitly set. In such a case, it is recommended that you override the desired CPU core value via &lt;code&gt;-XX:ActiveProcessorCount&lt;/code&gt;.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note:&lt;/strong&gt; In versions 18.0.2 and newer, OpenJDK will no longer take CPU shares settings into account for its calculation of available CPU cores. See &lt;a href="https://bugs.openjdk.java.net/browse/JDK-8281181"&gt;JDK-8281181&lt;/a&gt; for details.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;spec.containers[].resources.limits.cpu&lt;/code&gt; (L) millicore value directly translates to Docker's and Podman's &lt;code&gt;--cpu-quota&lt;/code&gt; (Q) and &lt;code&gt;--cpu-period&lt;/code&gt; (P) values. The JVM will calculate the limit—as set by (L)—based on the formula &lt;code&gt;ceil(Q/P)&lt;/code&gt;. Note that if &lt;em&gt;both&lt;/em&gt; &lt;code&gt;spec.containers[].resources.limits.cpu&lt;/code&gt; and &lt;code&gt;spec.containers[].resources.requests.cpu&lt;/code&gt; are specified, the &lt;code&gt;limits&lt;/code&gt; value takes precedence. This will make the JVM use reasonable values for CPU cores in the first three cases. To prefer shares over CPU quota, specify the &lt;code&gt;-XX:-PreferContainerQuotaForCPUCount&lt;/code&gt; option (see &lt;a href="https://bugs.openjdk.java.net/browse/JDK-8197867"&gt;JDK-8197867&lt;/a&gt; for more on this).&lt;/p&gt; &lt;p&gt;Similarly, resource limits for RAM exist via container orchestration frameworks. &lt;code&gt;spec.containers[].resources.limits.memory&lt;/code&gt; translates to the &lt;code&gt;–memory&lt;/code&gt; and &lt;code&gt;–memory-swap&lt;/code&gt; command-line options of container engines. &lt;code&gt;spec.containers[].resources.requests.memory&lt;/code&gt; usually doesn't have an effect on the spawned containers. On nodes using cgroup v2, &lt;code&gt;memory.min&lt;/code&gt; or &lt;code&gt;memory.low&lt;/code&gt; might be set accordingly. Memory request settings have no effect on the JVM side other than reporting those values for diagnostics.&lt;/p&gt; &lt;h2&gt;Diagnostic options for debugging&lt;/h2&gt; &lt;p&gt;Trace logs can be quite useful for helping you better understand what OpenJDK's container detection logic is doing. Note that there are two different implementations of the detection logic: One for the JVM (&lt;code&gt;libjvm.so&lt;/code&gt;) and another implemented in Java for use of core libraries.&lt;/p&gt; &lt;p&gt;The JVM's container detection logic is integrated with the unified logging framework and can be traced for example via &lt;code&gt;-Xlog:os+container=trace&lt;/code&gt;. For OpenJDK 8u JVMs, the rough equivalent is &lt;code&gt;-XX:+UnlockDiagnosticVMOptions -XX:+PrintContainerInfo&lt;/code&gt;. These traces print whether or not container detection is actually working and what values the JVM is determining to be in place by inspecting the cgroup pseudo filesystem of a deployed application.&lt;/p&gt; &lt;p&gt;For Java 11+ it's also useful to know which GC is being used, and you can display this information via &lt;code&gt;-Xlog:gc=info&lt;/code&gt;. For example, when container limits allow only a single CPU to be active, the Serial GC will be selected. If more than one CPU is active and sufficient memory (at least 2GB) is allocated to the container, the G1 GC will be selected in Java 11 and later versions:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ java -XX:ActiveProcessorCount=1 -Xlog:gc=info -version [0.048s][info][gc] Using Serial openjdk version "17.0.1" 2021-10-19 OpenJDK Runtime Environment 21.9 (build 17.0.1+12) OpenJDK 64-Bit Server VM 21.9 (build 17.0.1+12, mixed mode, sharing) $ java -Xlog:gc=info -version [0.006s][info][gc] Using G1 openjdk version "17.0.1" 2021-10-19 OpenJDK Runtime Environment 21.9 (build 17.0.1+12) OpenJDK 64-Bit Server VM 21.9 (build 17.0.1+12, mixed mode, sharing)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Other options include the &lt;code&gt;VM.info&lt;/code&gt; &lt;code&gt;jcmd&lt;/code&gt; utility, which is useful for determining the container detection settings of an already running Java process. The cgroup information shown via &lt;code&gt;VM.info&lt;/code&gt; is the same information recorded in &lt;code&gt;hs_err*.log&lt;/code&gt; files when the JVM crashes.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Most of this information is also available via &lt;a href="https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u"&gt;JDK Flight Recorder&lt;/a&gt; (JFR), a powerful tool for diagnosing issues. In containers, JFR information can be accessed via &lt;a href="https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers"&gt;Cryostat&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;For more information on how the Kubernetes deployment configuration can have an effect on OpenJDK's selection of a GC algorithm on a cgroups v2 system, check out my screencast on this topic:&lt;/p&gt; &lt;div class="video-embed-field-provider-youtube video-embed-field-responsive-video"&gt; &lt;/div&gt; &lt;p&gt;The screencast demonstrates that OpenJDK might behave slightly differently depending on your application's deployment in a container. With the help of this article, you can now make more sense of why. Feel free to tune your application's container settings so as to get the most out of your cloud deployment. Keep in mind that cgroup v2 support is only available in Java 17+ for now, although it will also be in OpenJDK 11u soon.&lt;/p&gt; &lt;p&gt;If you're interested in learning more about the ins and outs of fine-tuning Java in container-based environments, read the first article in this series, &lt;a href="https://developers.redhat.com/articles/2022/03/08/java-single-core-containers"&gt;Java in single-core containers&lt;/a&gt;, or check out &lt;a href="https://developers.redhat.com/articles/2021/11/23/faster-way-access-jdk-flight-recorder-data"&gt;Red Hat Developer's recent series on Cryostat&lt;/a&gt;. You can also watch &lt;a href="https://developers.redhat.com/devnation/tech-talks/java-and-containers"&gt;Java and containers: What's there to think about?&lt;/a&gt;, a DevNation Tech Talk from Christine Flood and Edson Yanaga.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/04/19/java-17-whats-new-openjdks-container-awareness" title="Java 17: What’s new in OpenJDK's container awareness"&gt;Java 17: What’s new in OpenJDK's container awareness&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Severin Gehwolf</dc:creator><dc:date>2022-04-19T07:00:00Z</dc:date></entry><entry><title>Announcement: Red Hat CodeReady Studio reaches end of life</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/04/18/announcement-red-hat-codeready-studio-reaches-end-life" /><author><name>Mohit Suman</name></author><id>6ec5faa0-8fbc-4e6c-b8fe-1f2e2c68160a</id><updated>2022-04-18T07:00:00Z</updated><published>2022-04-18T07:00:00Z</published><summary type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/codeready-studio/"&gt;Red Hat CodeReady Studio&lt;/a&gt; will reach end of life on April 19, 2022. The project is transitioning to community development and support as part of the &lt;a href="https://tools.jboss.org/"&gt;JBoss Tools&lt;/a&gt; project. This article breaks down all the information you need to know along with the future roadmap.&lt;/p&gt; &lt;h2&gt;What is CodeReady Studio?&lt;/h2&gt; &lt;p&gt;Red Hat CodeReady Studio is a fully bundled Eclipse IDE that includes the majority of &lt;a href="https://tools.jboss.org/"&gt;JBoss Tools&lt;/a&gt;, a set of plugins for Eclipse that complements, enhances, and goes beyond the support that exists for JBoss, along with related technologies in the default Eclipse distribution. CodeReady Studio also includes all required dependencies and third-party plugins.&lt;/p&gt; &lt;p&gt;CodeReady Studio has empowered application developers with a broad set of tools and capabilities. CodeReady Studio supports the full development lifecycle and a wide range of application runtimes and frameworks that can help you easily create new cloud-native microservices or iterate and improve upon your existing applications, such as &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; with &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/nodejs"&gt;Node.js&lt;/a&gt;. The project supports Eclipse-based developer tools for building service-oriented architecture (SOA) and Web 2.0 applications on Red Hat's integrated platforms, including &lt;a href="https://developers.redhat.com/products/rhel"&gt;Red Hat Enterprise Linux&lt;/a&gt; and &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;CodeReady Studio's journey to end of life&lt;/h2&gt; &lt;p&gt;CodeReady Studio was first released in March 2007. It has been a widely used and highly successful product shipped by Red Hat and used by customers with positive feedback.&lt;/p&gt; &lt;p&gt;After nearly 15 years of availability, Red Hat will be ending support for version 12 of CodeReady Studio on April 19, 2022 (Figure 1), turning the project over to the JBoss Tools community.&lt;/p&gt; &lt;figure class="align-center rhd-u-has-filter-caption" role="group"&gt;&lt;img alt="Figure 1: Version 12 is the final version of CodeReady Studio." data-entity-type="file" data-entity-uuid="a5111b8f-12ef-41b9-89aa-830f8d834a42" src="https://developers.redhat.com/sites/default/files/inline-images/Screenshot%202022-04-12%20at%209.49.42%20PM.png" width="2130" height="386" loading="lazy" /&gt;&lt;figcaption class="rhd-c-caption"&gt;Figure 1: Version 12 is the final version of CodeReady Studio.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;Future roadmap&lt;/h2&gt; &lt;p&gt;Going forward, support for all the application runtimes and middleware tools shipped with CodeReady Studio will be available through the &lt;a href="https://tools.jboss.org/"&gt;JBoss Tools&lt;/a&gt; projects. JBoss Tools will have the same set of Eclipse-based plugins, but without Red Hat branding or official support. Developers can take advantage of upstream community support.&lt;/p&gt; &lt;p&gt;Red Hat is committed to bringing great products to market that meet our customers' short-term and long-term needs. Thus, from a user perspective, nothing will change in the functionality of the supported set of plugins, and continuous active development will be supported by Red Hat.&lt;/p&gt; &lt;p&gt;For any enterprise customer who has questions about this announcement, please reach out to your Red Hat representative or contact &lt;a href="https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true"&gt;Red Hat Support&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The JBoss Tools community is proud of its product and will continue maintaining and adding features to the plugin. (This community is made up mostly of the same people who supported and built Red Hat CodeReady Studio.)&lt;/p&gt; &lt;p&gt;Hence, we are asking customers to use the latest version of JBoss Tools going forward, with the same feature set and plugins available. To get the newest feature set and plugins, please &lt;a href="https://tools.jboss.org/downloads/overview.html"&gt;download the latest version of JBoss Tools&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;How to download and install the last release bundle&lt;/h2&gt; &lt;p&gt;CodeReady Studio shipped its last release, 12.21.3, on Feb 7, 2022. It is available on the &lt;a href="https://developers.redhat.com/products/codeready-studio/download"&gt;official CodeReady Studio download page&lt;/a&gt;. Users and customers can download the binaries of the old releases there. For any new releases, patches, and features, all the supported plugins will be available via the &lt;a href="https://tools.jboss.org/downloads/overview.html"&gt;JBoss Tools website&lt;/a&gt;.&lt;/p&gt; &lt;ul&gt;&lt;/ul&gt;&lt;h2&gt;CodeReady Studio end of life FAQ&lt;/h2&gt; &lt;p&gt;We know that users will have many questions around the end of life and future scope of this project, so we have prepared the following FAQ to answer them. If you need more information or have any specific requests, please reach out to the upstream &lt;a href="https://github.com/jbosstools"&gt;JBoss community on GitHub&lt;/a&gt;, where we would be glad to take it forward.&lt;/p&gt; &lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;What products or versions are about to reach end of life?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The Red Hat CodeReady Studio product will have no future releases. The last release is &lt;strong&gt;12.21.3&lt;/strong&gt;, which is currently available for download from the &lt;a href="https://developers.redhat.com/products/codeready-studio/download"&gt;official CodeReady Studio download page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Are all the products supported reaching end of life?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;We have decided to sunset the CodeReady Studio product. All the application runtimes and frameworks supported as plugins will continue to be supported and released under JBoss Tools, a community-supported project.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;How can customers use the set of plugins supported by CodeReady Studio?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Red Hat will continue active development for all sets of plugins for Eclipse, which will be available for download through JBoss Tools.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Can the user install the same functionality from JBoss Tools?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Yes, the functionality of the plugins supported will be the same. All enhancements and patches for the associated plugins will be released via JBoss Tools.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;What kind of support will be provided for future releases?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The JBoss Tools plugins will be hosted on &lt;a href="https://marketplace.eclipse.org"&gt;Eclipse Marketplace&lt;/a&gt; and supported as an upstream project. Users should raise issues and request features in the &lt;a href="https://github.com/jbosstools"&gt;JBoss community on GitHub&lt;/a&gt;. As a courtesy, Red Hat's Customer Experience and Engagement (CEE) will probably provide "commercially reasonable support" and guide the customer to the community, but the customer should not rely on this support.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;What is the migration path for current CodeReady Studio users?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;With the end of life for CodeReady Studio, the new set of plugins will be available to download from the &lt;a href="https://tools.jboss.org/downloads/overview.html"&gt;JBoss Tools download&lt;/a&gt; site. Users can download stable and nightly builds here and migrate to the next releases for the associated plugins.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;When does the CodeReady Studio end of life take place?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The official date is April 19, 2022.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Has a corporate announcement been made?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Yes, a brief announcement has been published on the &lt;a href="https://access.redhat.com/announcements/6727051"&gt;Red Hat Customer Portal&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Where can I find the Product Lifecycle document?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;That document is also on the Red Hat Customer Portal and is entitled &lt;a href="https://access.redhat.com/node/4027141"&gt;Red Hat CodeReady Studio Life Cycle and Support Policy&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Does the CodeReady Studio end of life affect &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;CodeReady Workspaces&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;CodeReady Studio and CodeReady Workspaces are two different products supported by Red Hat. The CodeReady Studio end of life has &lt;em&gt;no&lt;/em&gt; impact on CodeReady Workspaces.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Will customers still be able to access prior versions of CodeReady Studio?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Yes, prior released versions, updates, and patches will be &lt;a href="https://developers.redhat.com/products/codeready-studio/download"&gt;available for download&lt;/a&gt; until the end of 2022.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Where can I download the next release of CodeReady Studio plugins?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Starting April 19, 2022, all the CodeReady Studio plugins, including those for middleware, application runtimes, and cloud-native development, will be available from JBoss Tools and will be supported upstream.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Where can I raise feature requests and issues for the next releases?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The code for the JBoss Tools supported product is on GitHub. Users can raise issues on the &lt;a href="https://github.com/jbosstools"&gt;GitHub repository&lt;/a&gt;, as well as request features and provide feedback.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Resources&lt;/h2&gt; &lt;p&gt;You can find official information here:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://access.redhat.com/node/4027141"&gt;Product lifecycle page&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/solutions/6727011"&gt;How long will CodeReady Studio be supported?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/announcements/6727051"&gt;Red Hat corporate announcement&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Thanks again for being a Red Hat customer. We look forward to achieving great things together!&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/04/18/announcement-red-hat-codeready-studio-reaches-end-life" title="Announcement: Red Hat CodeReady Studio reaches end of life"&gt;Announcement: Red Hat CodeReady Studio reaches end of life&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Mohit Suman</dc:creator><dc:date>2022-04-18T07:00:00Z</dc:date></entry><entry><title type="html">Portfolio Architecture Examples - Finance Collection</title><link rel="alternate" href="http://www.schabell.org/2022/04/portfolio-architecture-examples-finance-collection.html" /><author><name>Eric D. Schabell</name></author><id>http://www.schabell.org/2022/04/portfolio-architecture-examples-finance-collection.html</id><updated>2022-04-18T05:00:00Z</updated><content type="html">Figure 1: The portfolio architecture process For a few years now we've been working on a project we have named . These are based on selecting a specific use case we are seeing used in the real world by customers and then finding implementations of that case using three or more products from the Red Hat portfolio. This basic premise is used as the foundation, but many aspects of open source are included in both the process and the final product we have defined. There is a community, where we share the initial project kickoff with a group of architects and use their initial feedback from the start. We also present the architecture product we've created right at the end before we publish to ensure usability by architects in the field. The final publish product includes some internal only content around the customer projects researched, but most of the content is  through various open source channels.  This article is sharing an overview of the product we've developed, what's available to you , and concludes by sharing a collection of architectures we've published. INTRODUCTION The basis of a portfolio architecture is a use case, two to three actual implementations that can be researched, and includes the use of a minimum of three products. This is the ideal foundation for a project to start, but we encountered a problem with use cases containing emerging technologies or emerging domains in the market. To account for these we've chosen to note the fact that these are opinionated architectures based on internal reference architectures.  The product has been defined as complete for publishing when it contains the following content: * Short use case definition * Diagrams - logical, schematic (physical), and detail diagrams * Public slide deck containing the use case story and architecture diagrams * Internal slide deck containing both the pubic deck content and the confidential customer research * Video (short) explanation of the architecture * Either a technical brief document or one or more articles covering the solution architecture Note that the items in italics are all available to anyone  in the Red Hat Portfolio Architecture Center or in the Portfolio Architecture Examples repository. FIGURE 2: LOGICAL DIAGRAM DESIGN TEMPLATE TOOLING AND WORKSHOPS The progress towards our products required a good idea of how we wanted to diagram our architectures. We chose to keep them very generic and simple in style to facilitate all levels of conversation around a particular use case without getting bogged down in notational discussions.  A simple three level design for our architectures was captured by using logical, schematic, and detail diagrams. All of these have been integrated in  with pre-defined templates and icons for easily getting started. Furthermore, we've developed a tooling workshop to quickly ramp up on the design methods and tooling we've made available. It's called , has been featured in several. FINANCE COLLECTION The collection featured today is centred around architectures in the financial services industry. There are currently two architectures in this collection and we'll provide a short overview of each, leaving the in depth exploration as an exercise for the reader. Figure 3: Finance architecture collection In each of these architecture overviews you'll find a table of contents outlining the technologies used, several example schematic diagrams with descriptions, and a link in the last section to open the diagrams directly into the online tooling in your browser. Financial services institutions understand that today’s banking customers expect fast, easy-to-use services they can tap into anytime, anywhere, and are therefore accelerating adoption of digital technologies to enable a variety of new offerings. (Note: this project is a new architecture and currently in progress, so sharing one of the schematic architecture diagrams and you can monitor this project for updates as it progresses to completion.) The use case is a cloud ready, modular open source approach offering a wide range of technology options and allows low-effort integration covering all aspects of an Open Banking implementation. An offering of (near) real-time payments lets businesses, consumers, and even governments send and accept funds that provide both availability to the recipient and instant confirmation to the sender. Enabling real-time - or at least faster - payments that improve the speed of online payment experiences to customers has the potential to give banks a greater opportunity to win, serve, and retain their customers. By building solutions that capture real-time payment business, banks also can drive higher payment volumes, ideally at lower costs as well as engage new customer segments. The use case examines financial institutions enabling customers with fast, easy to use, and safe payment services available anytime, anywhere. If you are interested in more architecture solutions like these, feel free to export the . More architecture collections include: * Application development * * Data engineering * * * * * Retail *</content><dc:creator>Eric D. Schabell</dc:creator></entry><entry><title>JBoss Tools for Eclipse 2022-03</title><link rel="alternate" type="text/html" href="https://tools.jboss.org/blog/4.23.0.final.html" /><category term="release" /><category term="jbosstools" /><category term="jbosscentral" /><author><name>jeffmaury</name></author><id>https://tools.jboss.org/blog/4.23.0.final.html</id><updated>2022-04-16T13:36:59Z</updated><published>2022-04-15T00:00:00Z</published><content type="html">&lt;div&gt;&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;a href="https://tools.jboss.org/downloads/jbosstools/2022-03/4.23.0.Final.html"&gt;JBoss Tools 4.23.0&lt;/a&gt; for Eclipse 2022-03 is here waiting for you. Check it out!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We highly recommand to download or update to this latest version.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="note-for-red-hat-codeready-studio-users"&gt;&lt;a class="anchor" href="#note-for-red-hat-codeready-studio-users"&gt;&lt;/a&gt;Note for Red Hat CodeReady Studio users&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Red Hat CodeReady Studio product has reached end of life. The last release for the product was 12.21.3.GA. So there is no equivalent version of Red Hat CodeReady Studio for this version of JBoss Tools. Existing users of Red Hat CodeReady Studio can upgrade to this version of JBoss Tools.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For more information, see &lt;a href="https://developers.redhat.com/articles/2022/04/06/announcement-red-hat-codeready-studio-reaches-end-life"&gt;this article&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="installation"&gt;&lt;a class="anchor" href="#installation"&gt;&lt;/a&gt;Installation&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This release requires at least Eclipse 4.23 (2022-03) but we recommend using the latest &lt;a href="https://www.eclipse.org/downloads/packages/release/2022-03/r/eclipse-ide-enterprise-java-and-web-developers"&gt;Eclipse 4.23 2022-03 JEE Bundle&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;since then you get most of the dependencies preinstalled.&lt;/p&gt; &lt;/div&gt; &lt;div class="admonitionblock warning"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-warning" title="Warning"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Java11 is now required to run JBoss Tools (this is a requirement from Eclipse 4.17). So make sure to select a Java11 JDK in the installer. You can still work with pre-Java11 JDK/JRE and projects in the tool.&lt;/p&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &amp;quot;JBoss Tools&amp;quot;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can also use our update site directly.&lt;/p&gt; &lt;/div&gt; &lt;div class="literalblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;https://download.jboss.org/jbosstools/photon/stable/updates/&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="hibernate-tools"&gt;&lt;a class="anchor" href="#hibernate-tools"&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="hibernate-runtime-provider-updates"&gt;&lt;a class="anchor" href="#hibernate-runtime-provider-updates"&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A number of additions and updates have been performed on the available Hibernate runtime providers.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="runtime-provider-updates"&gt;&lt;a class="anchor" href="#runtime-provider-updates"&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 6.0 runtime provider (Preview) now incorporates Hibernate Core version 6.0.0.CR2 and Hibernate Tools version 6.0.0.CR2.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 5.6 runtime provider now incorporates Hibernate Core version 5.6.7.Final and Hibernate Tools version 5.6.7.Final.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 4.3 runtime provider now incorporates Hibernate Tools version 4.3.6.Final.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 3.6 runtime provider now incorporates Hibernate Tools version 3.6.2.Final.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 3.5 runtime provider now incorporates Hibernate Tools version 3.5.3.Final.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="quarkus-tools"&gt;&lt;a class="anchor" href="#quarkus-tools"&gt;&lt;/a&gt;Quarkus Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="qute-templates-support"&gt;&lt;a class="anchor" href="#qute-templates-support"&gt;&lt;/a&gt;Qute templates support&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Qute templates support has been added. This allows Quarkus developers to get enhanced editing experience to Qute templates located in their projects.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A Qute template is any file located under &lt;code&gt;src/main/resources/templates&lt;/code&gt; and with the &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;yaml&lt;/code&gt;, &lt;code&gt;yml&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;txt&lt;/code&gt; extension.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Qute support is enabled on any project that has a dependency on the Qute library.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can generate a Qute enabled project with the Quarkus project wizard and choosing the RESTEasy Classic Qute extension&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus33.gif" alt="quarkus33" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="qute-features"&gt;&lt;a class="anchor" href="#qute-features"&gt;&lt;/a&gt;Qute features&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Features included into the Qute support are:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Integration between Java files and Qute templates files&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Method parameter support in Qute template files&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Java Type Hover Support for Qute Templates&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Linked Editing Range Support in Qute Templates&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Qute Section Completion&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Support for Qute Validation&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Completion for Qute Value Resolvers&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Support for @TemplateExtension Methods&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Support for Directly Injecting Beans into Qute Templates&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="integration-between-java-files-and-qute-templates-files"&gt;&lt;a class="anchor" href="#integration-between-java-files-and-qute-templates-files"&gt;&lt;/a&gt;Integration between Java files and Qute templates files&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Any reference to a Qute template file from a Java file show the option to generate the Qute template file (if the Qute template file has not been found in the project) or navigate to the Qute template file.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus34.gif" alt="quarkus34" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="method-parameter-support-in-qute-template-files"&gt;&lt;a class="anchor" href="#method-parameter-support-in-qute-template-files"&gt;&lt;/a&gt;Method parameter support in Qute template files&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Qute language server has support for built-in and user-defined Java classes, including parameter completion and validation for their methods. Take advantage of this to easily avoid Java related mistakes.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus35.gif" alt="quarkus35" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-type-hover-support-for-qute-templates"&gt;&lt;a class="anchor" href="#java-type-hover-support-for-qute-templates"&gt;&lt;/a&gt;Java Type Hover Support for Qute Templates&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When hovering over an expression in a Qute template, the Java type (built-in or user defined) will be displayed.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus36.gif" alt="quarkus36" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="linked-editing-range-support-in-qute-templates"&gt;&lt;a class="anchor" href="#linked-editing-range-support-in-qute-templates"&gt;&lt;/a&gt;Linked Editing Range Support in Qute Templates&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Similar to most language, linked editing is now supported for Qute templates , allowing for simultaneous renaming of multiple parameter expressions.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus37.gif" alt="quarkus37" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="qute-section-completion"&gt;&lt;a class="anchor" href="#qute-section-completion"&gt;&lt;/a&gt;Qute Section Completion&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Qute templates use sections in its templating language to power any logic required when compiling and displaying the resulting document. To support this, the extension’s Qute support populates a completion list with all available Qute sections, along with any parameters they take and a small code snippet of its usage.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus38.gif" alt="quarkus38" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="support-for-qute-validation"&gt;&lt;a class="anchor" href="#support-for-qute-validation"&gt;&lt;/a&gt;Support for Qute Validation&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Java and Qute validation is included for Qute templates with Quarkus Tools, including diagnostics and quick fix suggestions.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus39.gif" alt="quarkus39" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The developer has the ability to disable this validation in their settings through the &lt;code&gt;Window&lt;/code&gt; → &lt;code&gt;Preferences&lt;/code&gt; → &lt;code&gt;JBoss Tools&lt;/code&gt; → &lt;code&gt;Qute&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus40.png" alt="quarkus40" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The second table contains a list of Qute templates (as regular expressions) for which validation will be excluded.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If any of the available validation is disturbing your development, you can disable Qute validation for the file project with a single click, using a “Quick Fix” that appears on every Qute related diagnostic&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus41.gif" alt="quarkus41" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="completion-for-qute-value-resolvers"&gt;&lt;a class="anchor" href="#completion-for-qute-value-resolvers"&gt;&lt;/a&gt;Completion for Qute Value Resolvers&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Paired with corresponding Java methods, built-in Java classes also have built-in Qute value resolvers made available by the Qute templating engine that is evaluated and outputs, or resolves to, a value. Quarkus Tools supports completion, hover and snippet generation for these built-in value resolvers.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus42.gif" alt="quarkus42" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="support-for-templateextension-methods"&gt;&lt;a class="anchor" href="#support-for-templateextension-methods"&gt;&lt;/a&gt;Support for @TemplateExtension Methods&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Template extension methods are used to extend the set of accessible properties of data objects. Qute support in Quarkus Tools has support for marked @TemplateExtension Java methods, which extend a given data model.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus43.gif" alt="quarkus43" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="support-for-directly-injecting-beans-into-qute-templates"&gt;&lt;a class="anchor" href="#support-for-directly-injecting-beans-into-qute-templates"&gt;&lt;/a&gt;Support for Directly Injecting Beans into Qute Templates&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A CDI bean annotated with @Named can be referenced in any template through cdi and/or inject namespaces. Quarkus Tools provides completion and definition navigation support for Beans.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus44.gif" alt="quarkus44" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="and-more"&gt;&lt;a class="anchor" href="#and-more"&gt;&lt;/a&gt;And more…​&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find more noteworthy updates in on &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.23.0.Final.html"&gt;this page&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-next"&gt;&lt;a class="anchor" href="#what-is-next"&gt;&lt;/a&gt;What is next?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Having JBoss Tools 4.23.0 out we are already working on the next release.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Jeff Maury&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;</content><summary>JBoss Tools 4.23.0 for Eclipse 2022-03 is here waiting for you. Check it out! We highly recommand to download or update to this latest version. Note for Red Hat CodeReady Studio users The Red Hat CodeReady Studio product has reached end of life. The last release for the product was 12.21.3.GA. So there is no equivalent version of Red Hat CodeReady Studio for this version of JBoss Tools. Existing users of Red Hat CodeReady Studio can upgrade to this version of JBoss Tools. For more information, see this article Installation JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more: This release requires at least Eclipse 4.23 (2022-03)...</summary><dc:creator>jeffmaury</dc:creator><dc:date>2022-04-15T00:00:00Z</dc:date></entry><entry><title type="html">Integrating Drools DMN Engine with IBM Open Prediction Service</title><link rel="alternate" href="https://blog.kie.org/2022/04/integrating-drools-dmn-engine-with-ibm-open-prediction-service.html" /><author><name>Matteo Mortari</name></author><id>https://blog.kie.org/2022/04/integrating-drools-dmn-engine-with-ibm-open-prediction-service.html</id><updated>2022-04-14T07:25:47Z</updated><content type="html">In this blog post we’re going to explore an integration between the and another open source project from IBM: "" (OPS). INTRODUCTION Integrating symbolic AIs (rule engines, KRR, etc) with Machine Learning predictive models is an effective strategy to achieve pragmatical, and often more eXplainable, AI solutions. We have also reiterated on this very powerful message across several conferences: For the most recent examples, you can reference or the , or the presentations. This is the reason why we believe the integration between Predictive Models (such as ML or PMML-based solutions) and Decision Models is very, very important. In this context, we will explore how to integrate the Drools DMN Engine with IBM’s Open Prediction Service hub, to achieve a pragmatic AI solution: The Open Prediction Service offers us a broker mechanism between several backends for ML evaluation of Predictive Models. BUILDING THE DEMO In today’s demo, we will develop a simple loan "fast-track" approval service, based on both a Predictive Model to estimate the Risk Score, and a Decision Table in DMN to apply a business policy. For the Risk Score prediction, you can reference on the IBM OPS repository. Using the documentation, also available as Swagger / OpenAPI descriptor, we can identify the Predictive Model input features and output scoring. Now we understand we will need to supply: * the Credit score * the Income * the Loan Amount requested * the number of instalments * and the Rate As output, we can reference the second predictor as a measure of Risk Score in our Decision Model. We can integrate the ML predictive model inside our DMN model to implement the loan "fast-track" approval as usual by defining a BKM node: Then, we can define a Decision Table implementing the business policy for the "fast-track" mechanism: We have completed our modeling activities with DMN and the Predictive Model served via OPS. INVOKING THE OPS SERVICE On the more technical side, to actually integrate OPS evaluation we can follow two options. The first solution could be to use the Quarkus’ RESTEasy client capabilities. For this demo, it’s enough to define the interface of the service: @Path("/predictions") @RegisterRestClient public interface OPSClient { @POST OPSResponse predictions(OPSRequest request); } You can explore the complete code by referencing the repo of the demo . Then, you just need to configure the actual URL for the OPS, for example: # Connect to OPS Server # on quarkus:dev, we use a local Docker run: %dev.quarkus.http.port=0 %dev.org.acme.demo20220330.OPSClient/mp-rest/url=http://localhost:8080 # as default, we are using an app deployed on OpenShift: org.acme.demo20220330.OPSClient/mp-rest/url=https://{your sandbox}.openshiftapps.com You can reference to , for more details about implementing a REST client with Quarkus. INVOKING OPS USING THE JAVA CLIENT SDK As a next step, we can replace the RESTEasy client, with the SDK offered by the OPS itself. In this case, it will be enough to reference the dependency in the Maven pom.xml: &lt;dependency&gt; &lt;groupId&gt;com.ibm.decision&lt;/groupId&gt; &lt;artifactId&gt;ops-client-sdk&lt;/artifactId&gt; &lt;/dependency&gt; Then, we can just replace the RESTEasy client with the OPS’ RunApi, for example: RunApi api = new RunApi(); Prediction prediction = new Prediction(); // ... prediction.setParameters(Arrays.asList( param("creditScore", creditScore), param("income", income), param("loanAmount", loanAmount), param("monthDuration", monthDuration), param("rate", rate) )); PredictionResponse result = api.prediction(prediction); You can explore the complete code by referencing the repo of the demo . RUNNING THE DEMO We will run the demo on the Red Hat Developer OpenShift Sandbox. Remember you can . The free account has some limitations, but they will not block you in replicate this complete solution! As you can see in the picture, first I have deployed the OPS demo on the sandbox (left). Then, I’ve deployed the DMN demo explained in this post, as a Kogito-based application (right). Then, we will have access to the Swagger OpenAPI code generated by the DMN extension of Kogito: As you can see, the REST API is automatically generated for the InputData nodes as defined by the DMN model (Prospect and Loan). Finally, to exercise the demo, we can make use of the automatically generated forms, based on the Swagger OpenAPI: In this case, as we would expect, the total amount would not classify for the fast-track. Then, we can exercise for a different amount value: In this case, beyond the expected improvement in the Risk Score prediction from the ML model, we classify for a "fasttrack" as the policy in the Decision Table prescribes. You can play with different values, showing how the Risk Score prediction is being affected and causing a different final decision. CONCLUSIONS In this post, we have explored integrating a Decision Model using DMN with a ML predictive model. Machine Learning and Decision Models together can provide a pragmatic, and eXplainable, AI solution. Specifically, we have explored integrating the Drools DMN Engine with IBM Open Prediction Service. The advantage of this integration comes from the capability of OPS to interact with several ML providers! Finally, we have deployed the complete demo on the OpenShift Sandbox. What do you think of this integration demo? Questions? Let us know in the comments below! The post appeared first on .</content><dc:creator>Matteo Mortari</dc:creator></entry><entry><title>Generate Helm charts for your Java application using JKube, Part 1</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/04/14/generate-helm-charts-your-java-application-using-jkube-part-1" /><author><name>Rohan Kumar</name></author><id>d5df0b74-748e-4ed5-a419-222174683e62</id><updated>2022-04-14T07:00:00Z</updated><published>2022-04-14T07:00:00Z</published><summary type="html">&lt;p&gt;Tools provided with &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; continually make it easier for &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; developers to build applications, store them in registries, and deploy images. This article looks at &lt;a href="https://helm.sh/"&gt;Helm charts&lt;/a&gt;, the fundamental tool for building applications on Kubernetes and the &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt; cloud service, together with &lt;a href="https://www.eclipse.org/jkube/"&gt;Eclipse JKube&lt;/a&gt;, which is available as a Kubernetes &lt;a href="https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin"&gt;Maven&lt;/a&gt; or &lt;a href="https://www.eclipse.org/jkube/docs/kubernetes-gradle-plugin"&gt;Gradle&lt;/a&gt; plugin.&lt;/p&gt; &lt;p&gt;The article demonstrates how combining Helm with JKube simplifies Kubernetes manifest management for Java projects. You'll learn how JKube makes it possible for Java developers to automatically generate and publish Helm charts (Figure 1).&lt;/p&gt; &lt;figure role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/joint.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/joint.png?itok=6_oHUM6t" width="880" height="975" alt="JKube can package a Java application and push it to a Kubernetes cluster using a Helm chart." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: JKube can package a Java application and push it to a Kubernetes cluster using a Helm chart. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;Overview of Helm and JKube&lt;/h2&gt; &lt;p&gt;Kubernetes has been here for a while now, and more and more organizations are showing interest in the platform. Java developers are becoming increasingly familiar with packaging their applications into &lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt; or &lt;a href="https://podman.io"&gt;Podman&lt;/a&gt; &lt;a href="https://developers.redhat.com/topics/containers/"&gt;container&lt;/a&gt; images and publishing them to container registries such as &lt;a href="https://hub.docker.com"&gt;Docker Hub&lt;/a&gt; and &lt;a href="https://quay.io"&gt;Quay.io&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When working with Kubernetes developers normally need to write Kubernetes configuration files in YAML format. The files can be written manually, of course. But as the complexity of applications increases, it becomes more and more difficult to manage and maintain these Kubernetes manifests.&lt;/p&gt; &lt;p&gt;The Helm project was introduced in 2015-16 to reduce this complexity. It allows Kubernetes users to package Kubernetes manifests in form of &lt;a href="https://helm.sh/docs/topics/charts/"&gt;Helm charts&lt;/a&gt;. A Helm chart is basically a collection of Kubernetes configuration files. It combines pre-configured Kubernetes application resources with corresponding versions into one easily manageable package.&lt;/p&gt; &lt;p&gt;Helm quickly gained popularity and became a graduated project of the &lt;a href="https://www.cncf.io"&gt;Cloud Native Computing Foundation&lt;/a&gt;. Helm is now considered the de facto package manager for Kubernetes. Think of it as equivalent to the &lt;code&gt;rpm -i&lt;/code&gt; command for &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Linux&lt;/a&gt; systems or &lt;code&gt;pip install&lt;/code&gt; for &lt;a href="https://developers.redhat.com/topics/python"&gt;Python&lt;/a&gt;. Helm processes an application packaged as a chart, and deploys the application to Kubernetes. Through a command-line interface (CLI), Helm makes installation, upgrades, fetching dependencies, and configuring deployments on Kubernetes smoother.&lt;/p&gt; &lt;p&gt;Benefits of Helm charts include:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Easy management of Kubernetes resource manifests&lt;/li&gt; &lt;li&gt;Better distribution of Kubernetes manifests across public and private Helm registries&lt;/li&gt; &lt;li&gt;Better management of version history for deployments with features such as &lt;a href="https://helm.sh/docs/helm/helm_rollback/"&gt;Helm Rollback&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;While Helm is useful, it has a learning curve. You can use Helm directly with Java projects, but it requires some effort. It isn't designed with Java developers' workflow in mind.&lt;/p&gt; &lt;p&gt;That's where Eclipse JKube comes in. JKube is a collection of tools and libraries that make your development experience smoother on top of Kubernetes and OpenShift. JKube is available as a Maven or Gradle plugin, and aids Java developers working with cloud-native technologies such as Docker and Kubernetes. JKube provides an end-to-end workflow for Java developers while building container images of applications, generating opinionated manifests, and deploying the images to a Kubernetes cluster. Along with opinionated defaults, JKube also provides a rich set of configuration options via plugin configuration.&lt;/p&gt; &lt;p&gt;Benefits of Eclipse JKube include:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Creation of container images and Kubernetes manifests with little to no configuration&lt;/li&gt; &lt;li&gt;Creation of Helm charts with little to no configuration&lt;/li&gt; &lt;li&gt;Robust operation in both inner and outer loop scenarios&lt;/li&gt; &lt;li&gt;Exposure as plugins via Maven and Gradle (with which Java developers are already familiar)&lt;/li&gt; &lt;li&gt;No external dependency on any CLI (&lt;code&gt;docker&lt;/code&gt;, &lt;code&gt;podman&lt;/code&gt;, &lt;code&gt;kubectl&lt;/code&gt;, &lt;code&gt;helm&lt;/code&gt;, &lt;code&gt;oc&lt;/code&gt;, etc.)&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;This article will specifically focus on generating Helm Charts using JKube. If you're not already familiar with general aspects of JKube usage, please check out &lt;a href="https://developers.redhat.com/blog/2020/01/28/introduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift"&gt;Introduction to Eclipse JKube: Java tooling for Kubernetes and Red Hat OpenShift&lt;/a&gt; to get up to speed.&lt;/p&gt; &lt;h2&gt;Generate Helm charts using Eclipse JKube&lt;/h2&gt; &lt;p&gt;Over the rest of this article, you will package a simple Java project into a Helm chart and publish it to a Helm registry using Eclipse JKube. After that, the Java project will be available to any Kubernetes cluster to be installed using the Helm CLI. Then you will install the chart on an OpenShift cluster on the &lt;a href="https://developers.redhat.com/developer-sandbox"&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you already have an existing Java project, you can try adding the plugins in this section to it. Otherwise, you can go to common starter websites such as &lt;a href="https://code.quarkus.io/"&gt;code.quarkus.io&lt;/a&gt; or &lt;a href="https://start.spring.io/"&gt;spring initializer&lt;/a&gt; to generate an application through Maven or Gradle. The sample code and configuration used in this article is available in a &lt;a href="https://github.com/rohankanojia-forks/eclipse-jkube-helm-demo"&gt;Github repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you're an Apache Maven user, add the OpenShift Maven plugin to your &lt;code&gt;pom.xml&lt;/code&gt; file through the following configuration:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt;&lt;dependency&gt; &lt;groupId&gt;org.eclipse.jkube&lt;/groupId&gt; &lt;artifactId&gt;openshift-maven-plugin&lt;/artifactId&gt; &lt;version&gt;${jkube.version}&lt;/version&gt; &lt;/dependency&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Once you've set up your Java project, you'll need to package it into a container image. You can use OpenShift Maven Plugin's build goal to package the application. This goal uses an OpenShift Source-to-Image (S2I) build, which builds the image in a pod and pushes it to OpenShift's internal container registry:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ./mvnw oc:build&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Once you've built a container image, you can generate Kubernetes manifests using the &lt;code&gt;resource&lt;/code&gt; goal:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ./mvnw oc:resource&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After running this command, you should be able to see OpenShift manifests generated in the build output directories:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ tree target/classes/META-INF/ target/classes/META-INF/ ├── jkube │ ├── openshift │ │ ├── jkube-helm-maven-deploymentconfig.yml │ │ ├── jkube-helm-maven-route.yml │ │ └── jkube-helm-maven-service.yml │ └── openshift.yml └── resources └── index.html 3 directories, 5 files&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead of preparing a Helm chart manually, package these generated OpenShift manifests into a Helm chart by running the following JKube Helm goal:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ./mvnw oc:helm&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;JKube generates a Helm chart without using the Helm CLI. You should be able to see both compressed and decompressed forms of the generated chart in the build output directory:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ls target/jkube-helm-mavejkube-helm-maven-1.0.0-SNAPSHOT-helmshift.tar.gz target/jkube-helm-maven-1.0.0-SNAPSHOT-helmshift.tar.gz $ tree target/jkube/helm/ target/jkube/helm/ └── jkube-helm-maven └── openshift ├── Chart.yaml ├── README.md ├── templates │ ├── jkube-helm-maven-deploymentconfig.yaml │ ├── jkube-helm-maven-route.yaml │ └── jkube-helm-maven-service.yaml └── values.yaml 3 directories, 6 files&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more advanced configuration options for Helm chart generation, please check out the &lt;a href="https://www.eclipse.org/jkube/docs/openshift-maven-plugin#jkube:helm"&gt;oc:helm documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Publish Helm charts to Helm repositories&lt;/h2&gt; &lt;p&gt;After you've packaged your application into a Helm chart, you might also want to upload it to a Helm registry. You can upload the chart using the JKube Helm push goal (&lt;code&gt;oc:helm-push&lt;/code&gt; for Maven and &lt;code&gt;ocHelmPush&lt;/code&gt; for Gradle).&lt;/p&gt; &lt;p&gt;First, you need to provide registry details in the plugin configuration. Because this article offers a demo application, we're providing registry details in &lt;code&gt;snapshotRepository&lt;/code&gt;. For a real application, you should use &lt;code&gt;stableRepository&lt;/code&gt;. The sample configuration is:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt; &lt;plugin&gt; &lt;groupId&gt;org.eclipse.jkube&lt;/groupId&gt; &lt;artifactId&gt;openshift-maven-plugin&lt;/artifactId&gt; &lt;version&gt;${jkube.version}&lt;/version&gt; &lt;configuration&gt; &lt;helm&gt; &lt;snapshotRepository&gt; &lt;name&gt;ChartMuseum&lt;/name&gt; &lt;url&gt;http://localhost:8080/api/charts&lt;/url&gt; &lt;type&gt;CHARTMUSEUM&lt;/type&gt; &lt;username&gt;user1&lt;/username&gt; &lt;/snapshotRepository&gt; &lt;/helm&gt; &lt;/configuration&gt; &lt;/plugin&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After you have configured the registry details, you can run the JKube Helm push goal. The following command uses Maven and provides the registry password on the command line as a property:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ./mvnw oc:helm-push -Djkube.helm.snapshotRepository.password=secret&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can check the complete list of configuration options for pushing Helm charts in the &lt;a href="https://www.eclipse.org/jkube/docs/openshift-maven-plugin#jkube:helm-push"&gt;oc:helm-push documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Deploy a Helm chart to OpenShift with the Helm CLI&lt;/h2&gt; &lt;p&gt;After you've pushed your Helm chart to a Helm registry, you can deploy your application by pulling it and installing the chart via the Helm CLI. This section shows several common commands.&lt;/p&gt; &lt;p&gt;List all available Helm registries:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ helm repo list&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Get the latest chart updates from the registries:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ helm repo update &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Search the Helm repositories for the chart you pushed in the previous section. Because you used the snapshot option, the following command has to include the &lt;code&gt;--devel&lt;/code&gt; option:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ helm search repo chartmusuem --devel NAME CHART VERSION APP VERSION DESCRIPTION chartmusuem/jkube-helm-maven 1.0.0-SNAPSHOT&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Install the chart:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ helm install --generate-name chartmusuem/jkube-helm-maven --devel I0301 22:23:38.971633 37999 request.go:665] Waited for 1.198529433s due to client-side throttling, not priority and fairness, request: GET:https://api.sandbox.openshiftapps.com:6443/apis/security.openshift.io/v1?timeout=32s NAME: jkube-helm-maven-1646153615 LAST DEPLOYED: Tue Mar 1 22:23:40 2022 NAMESPACE: rokumar-dev STATUS: deployed REVISION: 1 TEST SUITE: None&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This command deploys all OpenShift resources contained in this Helm chart to the OpenShift cluster. If you visit the console in the Developer Sandbox, you should see the application deployed in the Topology section (Figure 2). Click &lt;strong&gt;Open URL&lt;/strong&gt; and you should be redirected to your application's page (Figure 3).&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/console.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/console.png?itok=k8ySXqcU" width="1346" height="756" alt="The OpenShift console shows a Helm chart." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2. The OpenShift console shows a Helm chart. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 2: The OpenShift console shows a Helm chart.&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/open_1.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/open_1.png?itok=ZDmaGbaE" width="1160" height="813" alt="From the OpenShift console, you can open your application." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 3. From the OpenShift console, you can open your application. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 3: From the OpenShift console, you can open your application.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you learned about the Helm capabilities provided by the Kubernetes Maven and Gradle JKube plugins. Generating and distributing a complete Helm chart for a Java application consists of just adding the desired Maven or Gradle plugin and invoking a few commands. Look for a follow-up article soon where you'll learn about the advanced configuration options provided by Eclipse JKube for generating Helm charts and pushing them to Helm registries.&lt;/p&gt; &lt;p&gt;For more information about Eclipse JKube, please check out these articles:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2020/08/24/java-development-on-top-of-kubernetes-using-eclipse-jkube"&gt;Java development on top of Kubernetes using Eclipse JKube&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2021/12/09/get-started-gradle-plugins-eclipse-jkube"&gt;Get started with Gradle plugins for Eclipse JKube&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;You can also check out the &lt;a href="https://www.eclipse.org/jkube"&gt;Eclipse JKube website&lt;/a&gt;. If you like this project, feel free to follow it via these channels:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/tagged/jkube"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCpU2tjgpfkTVgeDq-DBSV7A"&gt;YouTube&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://twitter.com/jkubeio"&gt;Twitter&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://katacoda.com/jkubeio"&gt;Katakoda&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gitter.im/eclipse/jkube"&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/04/14/generate-helm-charts-your-java-application-using-jkube-part-1" title="Generate Helm charts for your Java application using JKube, Part 1"&gt;Generate Helm charts for your Java application using JKube, Part 1&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Rohan Kumar</dc:creator><dc:date>2022-04-14T07:00:00Z</dc:date></entry><entry><title type="html">DEFEASIBLE REASONING, DROOLS AND TRUTH MAINTENANCE SYSTEM</title><link rel="alternate" href="https://blog.kie.org/2022/04/defeasible-reasoning-drools-and-truth-maintenance-system.html" /><author><name>Nicole Prentzas</name></author><id>https://blog.kie.org/2022/04/defeasible-reasoning-drools-and-truth-maintenance-system.html</id><updated>2022-04-14T01:00:00Z</updated><content type="html">Defeasible reasoning [1] is a field of interest in both Philosophy and Computer Science (the subdiscipline of Artificial Intelligence (AI)). While the philosophical history of the field goes back to Aristotle, AI has only shown interest in it over the last 40 years.  What is called nonmonotonic reasoning in AI is roughly the same as defeasible reasoning in philosophy [2]. Reasoning is the process of deriving conclusions based on existing knowledge, using a problem solving strategy. Non-monotonic reasoning deals with incomplete or uncertain knowledge, where conclusions can be invalidated when adding new information (facts).  Here is an example: Something that looks red to me may justify me in believing that it is red, but if I subsequently learn that the object is illuminated by red light and I know that that can make things look red when they are not, then I cease to be justified in believing that the object is red. A system to deal with non-monotonic knowledge is the Truth Maintenance System (TMS) [3], a problem solver subsystem for reasoning programs, that is concerned with revising sets of beliefs and maintaining the truth in the system when new information contradicts existing information. More information about the TMS and how this is implemented in the Drools engine is provided below. Other formalisms for defeasible reasoning include logic-based approaches like defeasible logic and argumentation. Defeasible logic [4]: created by Donald Nute, is a simple and efficient rule based non-monotonic formalism. The main intuition of the logic is to be able to derive “plausible” conclusions from partial and sometimes conflicting information. A conclusion can be withdrawn when new information is added, hence conclusions are considered tentative. Defeasible logic is useful when we want to express that some statements are “usually” or “most of the time” true, but not strictly always. Example: (in DeLP programming, [5]) flies(X) -&lt; bird(X)   // a bird typically flies (a defeasible rule) bird(X) &lt;- penguin(X)  // a penguin is a bird (a strict rule) ~flies(X) &lt;- penguin(X)  // penguins don’t fly (a strict rule) penguin(tweety) //tweety is a penguin (a fact) Query: flies(tweety) Answer: NO  //because tweety is a penguin and penguins don’t fly In the above example, the first statement (that a bird flies) is not always true and for that reason it is defined as a defeasible rule. So, in the case of penguin(tweety), the query flies(tweety) returns NO because of the strict rule ~flies(X) &lt;- penguin(X) that is stronger than defeasible rule flies(X) -&lt; bird(X). Argumentation: is a principled form of reasoning with conflicting information. It consists of defining arguments, and attacks or preferences between them, and a process of evaluating these arguments to identify plausible conclusions. The previous example in DeLP can be implemented as an argumentation theory, with preferences between arguments denoting priorities, instead of using strict and defeasible rules. More information about this approach is provided in the Conclusions and Further Reading paragraph. Example: rule(r1(X), fly(X), [bird(X)]).   // birds fly rule(r2(X), neg(fly(X)), [penguin(X)]).   // penguins don’t fly rule(f1, bird(tweety), []).  // tweety is a bird rule(f2, penguin(tweety), []).   // tweety is a penguin rule(pr1(X), prefer(r2(X), r1(X)), []).   // r2 is stronger than r1 Query: prove([neg(fly(tweety))],Delta). Answer: Delta = [f2, r2(tweety)]   // Delta = the admissible argument for the query Query: prove([fly(tweety)],Delta. Answer:  // has no solution Drools and Truth Maintenance Systems [3],[7],[8]   The basic function of the Drools engine is to match data to business rules and determine whether and how to execute rules. To ensure that relevant data is applied to the appropriate rules, the Drools engine makes inferences based on existing knowledge and performs the actions based on the inferred information. The Drools engine uses truth maintenance to justify the assertion of data and enforce truthfulness when applying inferred information to rules, to identify inconsistencies and to handle contradictions. In the Drools engine, data is inserted as facts, using either stated (defined with insert()) or logical insertions (defined with insertLogical()). After stated insertions, facts are generally retracted explicitly. After logical insertions, the facts are automatically retracted when no condition supports the logical insertion. A fact that is logically inserted is considered to be justified by the Drools engine. Example: rule “Allow sweets on Saturday” when    $d : DietAssistant ( day == “Saturday” ) then    insertLogical( new AllowSweets( $d ) ); end The fact (AllowSweets($d)) depends on the truth of the “when” clause. When the rule (DietAssistant(day==”Saturday”)) becomes false the fact is automatically retracted. In the Drools engine there is a “simple” implementation of a TMS available and an experimental implementation of a justified TMS (JTMS). JTMS implementation allows a logical insertion to have a positive or a negative label. This allows for contradiction handling. A logical insertion will only exist in the main working memory, as long as there is no conflict in the labeling – i.e. it must be one or more positive labels, and no negative labels. Example: rule “Allow sweets on Saturday” when    $d : DietAssistant ( day == “Saturday” ) then    insertLogical( new AllowSweets( $d ) ); end rule “Do not allow sweets” when    $d : DietAssistant () then    insertLogical( new AllowSweets( $d ), “neg” ); end The above rules are executed in the order given, so first the AllowSweets object is inserted into the working memory, and then, as a result of the “Do not allow sweets” rule execution, the object is retracted, because of the conflict. Limitations of current JTMS: contradiction handling is done at the level of logical insertion, meaning that the entire object is retracted from the memory when a conflict occurs. A new approach to TMS: contradiction handling at the level of a specific property change, so that the object remains in the memory and indicates the property changes that are in conflict. An idea towards this approach is to use a wrapper class that will be responsible to update the properties of the object to be inserted into the working memory, and provide methods for restoring the object’s state, in the case of a conflict. So instead of insertLogical( new AllowSweets($d)) we can use a command-wrapper class and do insertLogical( new Command($d, {property-changes}), with property changes given in the form of pairs (property,value), e.g. {(allowDenySweets,Ture),(freeDay,Wednesday)}. Then, the contradiction handling process will consider the changes inserted in the working memory at the property level. If positive and negative changes occur for a single property, this would be considered a conflict and the state of that particular property will be restored accordingly. Example: public class Person {    private String name;    private String onDiet=”no”;    private String allowDenySweets=”tbd”;    private String freeDay=null; } rule “Rule1: allow sweets, set freeDay Monday” when    $p : Person () then    insertLogical(new Command($p,{(allowDenySweets,”allow”),(freeDay,”Monday”)})); end rule “Rule2: set freeDay Wednesday” when    $p : Person () then    insertLogical(new Command($p,{(freeDay,”Wednesday”)})); end rule “Rule3: do now allow sweets” when    $p : Person () then    insertLogical(new Command($p,{(allowDenySweets,”allow”)}),“neg”)); end Testing: Rules 1, 2 and 3 are activated in the order given. The activation of Rule1 results in the change of two property values of the object p, the property allowDenySweets is set to “allow” and the property freeDay is set to “Monday”. The activation of Rule2 results in the change of the property freeDay to “Wednesday”. The activation of Rule3 will cause a conflict with Rule1, and the changes in the property allowDenySweets. This will result in restoring the value of this property to its original value (before the activation of Rule1, that is the value of “tbd”). The value of the property freeDay will not be affected. Conclusions and Further Reading: Classical methods of knowledge representation and reasoning are based on the assumption that the information available is complete and consistent. However, in many cases, problems or domains, we’ll find incomplete statements or rules, with unknown conditions, and contradictory conclusions. Defeasible reasoning addresses the problem of reasoning under uncertainty, by allowing conclusions to be retracted in the presence of new information. Truth maintenance systems, defeasible logic and argumentation are some approaches towards defeasibility. They are all presented in the previous paragraphs with a short introduction and examples. Gorgias is a general argumentation framework that combines the ideas of preference reasoning and abduction. It was developed as a Prolog meta-interpreter to support a dialectical argumentation process for the development of applications of argumentation. More information can be found in the paper “Gorgias: Applying argumentation” [6]. References: [1] [2] [3] [4] [5] [6] [7] [8] The post appeared first on .</content><dc:creator>Nicole Prentzas</dc:creator></entry><entry><title>Quarkus Newsletter #19 - April</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/quarkus-newsletter-19/&#xA;            " /><author><name>James Cobb (https://twitter.com/insectengine)</name></author><id>https://quarkus.io/blog/quarkus-newsletter-19/</id><updated>2022-04-14T00:00:00Z</updated><published>2022-04-14T00:00:00Z</published><summary type="html">The April newsletter has been sent. It’s full of great new articles like "Kubernetes Native Java with Quarkus" by Jason Greene, John Clingan and Eric Deandrea. Others include:Develop and Deploy Cloud Native Java Applications at Supersonic speed, Build a REST API from the ground up with Quarkus 2.0, Building Databases...</summary><dc:creator>James Cobb (https://twitter.com/insectengine)</dc:creator><dc:date>2022-04-14T00:00:00Z</dc:date></entry><entry><title type="html">DevOpsDays Raleigh 2022 - Talking Architecture Shop (slides)</title><link rel="alternate" href="http://www.schabell.org/2022/04/devopsdays-raleigh-2022-talking-architecture-shop-slides.html" /><author><name>Eric D. Schabell</name></author><id>http://www.schabell.org/2022/04/devopsdays-raleigh-2022-talking-architecture-shop-slides.html</id><updated>2022-04-13T18:00:00Z</updated><content type="html">I've  that I had a talk accepted to the DevOpsDays Raleigh 2022 conference this year.  Today was the day after travel to Raleigh that we got  to chat with a room of super enthusiastic architects. Thanks for the time and lending us your ears. Below you'll find the talk title and abstract along with the slides for your viewing pleasure. My session is from a series called Talking Architecture Shop. This is focusing on architecture research for solutions in the DevOps domain that scale and will be co-presented with my good friend . TALKING ARCHITECTURE SHOP - EXPLORING OPEN SOURCE DEVOPS AT SCALE  You've heard of large scale open source architectures, but have you ever wanted to take a serious look at these real life enterprise DevOps implementations that scale? This session takes attendees on a tour of multiple use cases covering DevOps challenges with hybrid cloud management with GitOps, DevOps in healthcare, and much more. Not only are these architectures interesting, but they are successful real life implementations featuring open source technologies and power many of your own online experiences. The attendee departs this session with a working knowledge of how to map general open source technologies to their solutions. Material covered is available freely online and attendees can use these solutions as starting points for aligning to their own solution architectures. Join us for an hour of power as we talk architecture shop!</content><dc:creator>Eric D. Schabell</dc:creator></entry></feed>
